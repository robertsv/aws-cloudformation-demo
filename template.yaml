AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.1.0/24 # 10.0.1.1 - 10.0.1.254
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_VPC"

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  !Ref VPC
      CidrBlock: 10.0.1.0/25 # 10.0.1.1 - 10.0.1.127
      AvailabilityZone: us-east-1b
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_Subnet"

  Server1:
    Type: AWS::EC2::Instance
    DependsOn:
      - RouteTableForPublicSubnetRoute1
      - BastionEIPAssociation
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              openjdk-8-jre: []
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      SubnetId: !Ref Subnet
      AvailabilityZone: us-east-1b
      ImageId: ami-0a313d6098716f372
      InstanceType: t2.micro
      KeyName: white_box
      PrivateIpAddress: 10.0.1.4
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          # Install package manager for Python packages
          apt-get install python-pip -y
          # Install AWS CF helper scripts
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          # Install salt master and minion
          curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com
          sh bootstrap-salt.sh -M -P git v2018.3.3
          cat >> /etc/salt/master <<EOF
          # The address of the interface to bind to:
          interface: 10.0.1.4
          EOF
          cat >> /etc/salt/minion <<EOF
          # Set the location of the salt master server. If the master server cannot be
          # resolved, then the minion will fail to start.
          master: 10.0.1.4
          EOF
          systemctl restart salt-master.service
          while [ $(systemctl is-active salt-master.service) != "active" ]; do
            sleep 15
          done
          systemctl restart salt-minion.service
          while [ $(systemctl is-active salt-minion.service) != "active" ]; do
            sleep 15
          done
          salt-key --accept-all -y
          systemctl restart salt-minion.service
          while [ $(systemctl is-active salt-minion.service) != "active" ]; do
            sleep 15
          done
          # Start cfn-init
          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource Server1
          # All done so signal success
          cfn-signal --region ${AWS::Region} --stack ${AWS::StackId} --resource Server1 --exit-code $?
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_Server1"

  BastionEIP:
    Type: AWS::EC2::EIP

  BastionEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Server1
      EIP: !Ref BastionEIP

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_InternetGateway"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTableForPublicSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_RouteTable"

  RouteTableForPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTableForPublicSubnet

  RouteTableForPublicSubnetRoute1:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_SSHSecurityGroup"

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow to access web application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Stack"
          Value: "aws-cloudformation-with-ec2-and-saltstack"
        - Key: "Name"
          Value: "Test_ServerSecurityGroup"
