AWSTemplateFormatVersion: 2010-09-09
Metadata:
  License: GNU GPLv3
Description: "AWS CloudFormation sample template to demo how to:
                * create two EC2 instances in non-default VPC, where one is in public subnet and one in private subnet
                * use CF init (AWS::CloudFormation::Init) and UserData for instance initialization
                * install salt
              Following main resources are created:
                * VPC
                * two subnets
                * two EC2 instances
                * internet gateway
                * NAT gateway
                * one EIP
              This template is to designed to work in all regions but it requires two input parameters:
                * EC2 ssh access key
                * AMI ID for Ubuntu 18"

Parameters:
  KeyName:
    Description: EC2 ssh access key
    Type: AWS::EC2::KeyPair::KeyName
  Ubuntu18AmiId:
    Description: AMI ID for Ubuntu 18 (defaults to AMI ID for N. Virginia, if region other than N. Virginia is selected then AMI ID must be changed!)
    Type:  String
    Default: ami-0a313d6098716f372 # AMI ID for Ubuntu 18 in N. Virginia

Mappings:
  Network:
    VPC:
      range: 10.0.1.0/24 # 10.0.1.1 - 10.0.1.255
    PublicSubnet:
      range: 10.0.1.0/25 # 10.0.1.1 - 10.0.1.127
    PrivateSubnet:
      range: 10.0.1.128/25 # 10.0.1.128 - 10.0.1.255
    PublicServer:
      ip: 10.0.1.4
    PrivateServer:
      ip: 10.0.1.132

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [Network, VPC, range]
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  !Ref VPC
      CidrBlock: !FindInMap [Network, PublicSubnet, range]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  !Ref VPC
      CidrBlock: !FindInMap [Network, PrivateSubnet, range]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__PrivateSubnet

  PublicServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - RouteTableForPublicSubnetRoute1
      - RouteTableForPrivateSubnetRoute1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              openjdk-11-jre: []
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      ImageId: !Ref Ubuntu18AmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          echo "Install package manager for Python packages"
          apt-get install python-pip -y
          echo "Install AWS CF helper scripts"
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          echo "Download salt bootstrap script"
          curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com
          echo "Install salt master and minion"
          sh bootstrap-salt.sh -M -P git v2018.3.3
          echo "Update /etc/salt/master cfg"
          cat >> /etc/salt/master <<EOF
          # The address of the interface to bind to:
          interface: 10.0.1.4
          EOF
          echo "Update /etc/salt/minion cfg"
          cat >> /etc/salt/minion <<EOF
          # Set the location of the salt master server.
          master: 10.0.1.4
          EOF
          echo "Restart salt master"
          systemctl restart salt-master.service
          echo "Restart salt minion"
          systemctl restart salt-minion.service
          echo "Wait until all public key of salt minions are accepted ..."
          while [ $(ls -A /etc/salt/pki/master/minions | wc -l) != 2 ]; do
            sleep 15
            salt-key --accept-all -y
          done
          echo "Start cfn-init"
          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource PublicServer
          echo "All done send success signal"
          cfn-signal --region ${AWS::Region} --stack ${AWS::StackId} --resource PublicServer --exit-code $?
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
          PrivateIpAddress: !FindInMap [Network, PublicServer, ip]
          Description: Primary network interface
          DeviceIndex: 0
          GroupSet:
            - !Ref SSHSecurityGroup
            - !Ref ServerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__PublicServer

  PrivateServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - RouteTableForPublicSubnetRoute1
      - RouteTableForPrivateSubnetRoute1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              openjdk-11-jre: []
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      ImageId: !Ref Ubuntu18AmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          echo "Install package manager for Python packages"
          apt-get install python-pip -y
          echo "Install AWS CF helper scripts"
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          echo "Download salt bootstrap script"
          curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com
          echo "Install salt minion"
          sh bootstrap-salt.sh -P git v2018.3.3
          echo "Update /etc/salt/minion cfg"
          cat >> /etc/salt/minion <<EOF
          # Set the location of the salt master server.
          master: 10.0.1.4
          EOF
          echo "Restart salt minion"
          systemctl restart salt-minion.service
          echo "Start cfn-init"
          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource PrivateServer
          echo "All done so signal success"
          cfn-signal --region ${AWS::Region} --stack ${AWS::StackId} --resource PrivateServer --exit-code $?
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: !FindInMap [Network, PrivateServer, ip]
          Description: Primary network interface
          DeviceIndex: 0
          GroupSet:
            - !Ref SSHSecurityGroup
            - !Ref ServerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__PrivateServer

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP
          - AllocationId
      SubnetId: !Ref PublicSubnet

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  RouteTableForPublicSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__RouteTableForPublicSubnet

  RouteTableForPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTableForPublicSubnet

  RouteTableForPublicSubnetRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableForPrivateSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__RouteTableForPrivateSubnet

  RouteTableForPrivateSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref RouteTableForPrivateSubnet

  RouteTableForPrivateSubnetRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__SSHSecurityGroup

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow to access web application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.1.0/24
      Tags:
        - Key: Stack
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Sub ${AWS::StackName}__ServerSecurityGroup
